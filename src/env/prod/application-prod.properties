#[redis配置]
#redis服务主机地址
spring.redis.host=192.168.0.171
#redis密码
spring.redis.password=
#redis端口
spring.redis.port=6379
#redis连接超时时间
spring.redis.timeout=5000
#关闭超时时间
spring.redis.lettuce.shutdown-timeout=100ms
#最大连接数
spring.redis.lettuce.pool.max-active=200
#最大空闲连接
spring.redis.lettuce.pool.max-idle=200
#连接池最大阻塞等待时间
spring.redis.lettuce.pool.max-wait=1000ms
#连接池最小空闲连接
spring.redis.lettuce.pool.min-idle=20
#扫描空闲连接间隔时间
spring.redis.lettuce.pool.time-between-eviction-runs=60s


# 缓存前缀
ares.cache.prefix=ares:cache
# 缓存默认过期时间，单位秒
ares.cache.default-expire-date=500
# 缓存默认字符集
ares.cache.default-charset=UTF-8



# [会话配置]
# cookie中会话ID字段名称
server.servlet.session.cookie.name=SESSION
# cookie中会话ID是否进行base64编码
server.servlet.session.cookie.use-base64-encoding=false
# 是否启用httpOnly，若此属性为true，则只有在http请求头中会带有此cookie的信息，而不能通过document.cookie来访问此cookie
server.servlet.session.cookie.http-only=true
# 会话超时时间
server.servlet.session.timeout=10m
# redis中存储会话的命名空间名称
spring.session.redis.namespace=ares:session:base

server.servlet.session.cookie.secure=false



# 密码加密盐值
jasypt.encryptor.password=salt



# [数据库配置开始]

## 数据库访问地址
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/gateway?characterEncoding=utf8&characterSetResults=utf8&autoReconnect=true&failOverReadOnly=false&useSSL=false
## 数据库访问用户名
#spring.datasource.username=root
## 数据库访问密码
#spring.datasource.password=123456
# 数据库驱动类
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver


## 数据库访问地址
spring.datasource.url=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE = yes)(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.0.170)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=ORCL)(FAILOVER_MODE =(TYPE = SELECT)(METHOD = BASIC)(RETRIES = 180)(DELAY = 5))))
## 数据库访问用户名
spring.datasource.username=gateway6
## 数据库访问密码
spring.datasource.password=123456


# 配置初始化、最小、最大连接
spring.datasource.druid.initial-size=1
spring.datasource.druid.min-idle=2
spring.datasource.druid.max-active=10


# 程序没有close连接且空闲时长超过 time-between-eviction-runs-millis ,则执行validationQuery指定的SQL
spring.datasource.druid.keep-alive=true

# 获取连接最大等待时间，单位毫秒
spring.datasource.druid.max-wait=10000
# 数据源名称，用于区分多数据源
spring.datasource.druid.name=master

# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=15000

# 连接的最小生存的时间，单位是毫秒， Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于 minEvictableIdleTimeMillis，则关闭当前连接。
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 连接的最大存活时间，单位是毫秒，如果连接的最大时间大于maxEvictableIdleTimeMillis，则无视最小连接数强制回收
spring.datasource.druid.max-evictable-idle-time-millis=360000

# 用来检测连接是否有效的SQL,不同数据库，会有不同的校验语句，mysql一般为select 1，oracle一般为select 1 from dual
spring.datasource.druid.validation-query=select 1 from dual
# 检测连接是否有效的超时时间，单位秒
spring.datasource.druid.validation-query-timeout=10

# 获取连接、归还连接是否检查连接有效
spring.datasource.druid.test-on-borrow=true
spring.datasource.druid.test-on-return=false

# 申请连接的时候检测，如果连接的空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
spring.datasource.druid.test-while-idle=true

# 配置日志输出
spring.datasource.druid.filter.slf4j.enabled=true

# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall,slf4j
# 配置StatFilter 
spring.datasource.druid.filter.stat.enabled=true
# 是否启用慢SQL监控
spring.datasource.druid.filter.stat.log-slow-sql=true
# 慢SQL时间，单位毫秒，表示超过多少毫秒
spring.datasource.druid.filter.stat.slow-sql-millis=2000

# 配置WallFilter 
# 是否开启sql防火墙
spring.datasource.druid.filter.wall.enabled=false
# 是否运行删除表
spring.datasource.druid.filter.wall.config.drop-table-allow=false


##监控配置

# WebStatFilter配置
spring.datasource.druid.web-stat-filter.enabled=true
spring.datasource.druid.web-stat-filter.url-pattern=/*
spring.datasource.druid.web-stat-filter.exclusions=/druid/*,*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico
spring.datasource.druid.web-stat-filter.session-stat-enable=true
spring.datasource.druid.web-stat-filter.session-stat-max-count=1000

# 是否启用监控页面
spring.datasource.druid.stat-view-servlet.enabled=true
# 配置DruidStatViewServlet
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
# 禁用HTML页面上的“Reset All”功能
spring.datasource.druid.stat-view-servlet.reset-enable=false
# 监控页面登录的用户名
spring.datasource.druid.stat-view-servlet.login-username=admin
# 监控页面登录的密码
spring.datasource.druid.stat-view-servlet.login-password=123456
# IP白名单(没有配置或者为空，则允许所有访问)
spring.datasource.druid.stat-view-servlet.allow=127.0.0.1,192.168.0.1
# IP黑名单(存在共同时，deny优先于allow)
spring.datasource.druid.stat-view-servlet.deny=


# mybatis配置，目前配置是mysql的xml配置，如果切换数据库如oracle，注意修改为oracle
mybatis.config-location=classpath:mybatis/mysql/mybatis-config.xml
mybatis.mapper-locations=classpath:mybatis/mysql/mapper/**/*.xml

# 是否使用数据库，默认true，设置false关闭后会执行ibatisDao中的方法但是不会实际执行SQL，只是为了让程序报错，谨慎使用
ares.database.enabled=true



# [数据库配置结束]



# [注册中心配置开始]

#标记表示，当猜测主机名时，应该根据OS报告的主机名使用服务器的IP地址
eureka.instance.prefer-ip-address=true
#可用区域映射到与eureka服务器通信的完全限定URL列表。每个值可以是单个URL或逗号分隔的备用位置列表。通常，eureka服务器URL携带协议，主机，端口，上下文和版本信息（如果有）
eureka.client.service-url.defaultZone=http://192.168.1.161:9901/eureka

#表示eureka client间隔多久去拉取服务注册信息，默认为30秒
eureka.client.registry-fetch-interval-seconds=5
#表示eureka client发送心跳给server端的频率，默认为30秒
eureka.instance.lease-renewal-interval-in-seconds=10


eureka.instance.instance-id=${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}

eureka.instance.metadata-map.management.context-path=${server.servlet.context-path}/actuator
#获取此实例的相对状态页URL路径。然后，根据主机名和通信类型构造状态页面URL——secure或unsecure，如securePort和nonSecurePort中指定的那样。它通常用于其他服务的信息目的，以查找此实例的状态。用户可以提供一个简单的HTML，指示实例的当前状态。
eureka.instance.status-page-url-path=${server.servlet.context-path}/actuator/info
#获取此实例的相对主页URL路径。然后，主页URL由主机名和通信类型(安全或不安全)构造。它通常用于其他服务将其用作登录页的信息目的
eureka.instance.home-page-url-path=${server.servlet.context-path}
#标记表示，当猜测主机名时，应该根据OS报告的主机名使用服务器的IP地址。

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=ALWAYS

# 启用shutdown
management.endpoint.shutdown.enabled=true

# [注册中心配置结束]

#【文件上传/下载配置】
#上传文件存放根目录
ares.common.file.upload.dir=/Users/lenovo/Desktop/
#ares.common.file.upload.dir=/nas/test/ecs/files2/
#下载文件根目录
ares.common.file.download.dir=E:/Users/lenovo/Desktop/%s
#ares.common.file.download.dir=https://test-ecs.ytfs.yitong.com.cn/ares-shop-cloud/common/file/download/%s
